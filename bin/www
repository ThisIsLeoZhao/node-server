#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('weibo:server');
var http = require('http');
var https = require('https');

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.PORT || '8080');

/**
 * Create HTTP server.
 */

const httpServer = http.createServer((req, res) => {
    res.writeHead(307, {Location: `https://${req.headers.host.split(':')[0]}:3000${req.url}`});
    res.end();
});
const httpsServer = https.createServer(app.get('sslOptions'), app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(3000);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening.bind(this, httpsServer));

httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening.bind(this, httpServer));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof httpPort === 'string'
        ? 'Pipe ' + httpPort
        : 'Port ' + httpPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

function onListening(server) {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
